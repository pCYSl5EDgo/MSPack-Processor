<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Copyright (c) pCYSl5EDgo. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using Mono.Cecil.Cil;

namespace MSPack.Processor.Core.Embed{
    public static class InstructionConcatHelper
    {
<#const int count = 7;#>
<#for(var i = 2; i < count + 1; i++){#>
        public static Instruction[] Concat(
            (
<#for(var j = 0; j < i; j++){#>
                Instruction[]<#if(j != i - 1){#>,
<#}#>
<#}#>
            
            )
            tuple
        )
        {
            return Concat(
<#for(var j = 0; j < i; j++){#>
                tuple.Item<#=(j + 1)#><#if(j != i - 1){#>,
<#}#>
<#}#>

            );
        }
        public static Instruction[] Concat(
            <#for(var j = 0; j < i; j++){#>Instruction[] array<#=j#><#if(j != i - 1){#>,
            <#}#>
<#}#>)
        {
            var answer = new Instruction[
<#for(var j = 0; j < i; j++){#>
                + array<#=j#>.Length
<#}#>
            ];
            var sum = 0;
<#for(var j = 0; j < i; j++){#>
            Array.Copy(array<#=j#>, 0, answer, sum, array<#=j#>.Length);
<#if(j != i - 1){#>
            sum += array<#=j#>.Length;
<#}}#>
            return answer;
        }
<#}#>
    }
}